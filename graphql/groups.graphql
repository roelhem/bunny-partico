type Group implements AccessControlled @node(resolver: "App\\Models\\Group@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    name: String
    description: String
    remarks: String
    category: GroupCategory @belongsTo(relation: "category", scopes: ["withViewAccess"])
    contacts: [Contact!] @belongsToMany(relation: "contacts", type: "connection", scopes: ["withViewAccess"], edgeType: "GroupContactEdge")
}

type GroupCategory implements AccessControlled @node(resolver: "App\\Models\\GroupCategory@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    name: String
    description: String
    remarks: String
    groups: Group @hasMany(relation: "groups", type: "connection",  scopes: ["withViewAccess"])
}

type GroupContactEdge {
    node: Contact
    cursor: String!
    created_at: DateTime
    updated_at: DateTime
}

type ContactGroupEdge {
    node: Group
    cursor: String!
    created_at: DateTime
    updated_at: DateTime
}

extend type Contact {
    groups: [Group] @belongsToMany(relation: "groups", type: "connection", scopes: ["withViewAccess"], edgeType: "ContactGroupEdge")
}

extend type Query {
    groups: [Group!] @paginate(type: "connection",  scopes: ["withViewAccess"])
    group_categories: [GroupCategory!] @paginate(type: "connection",  scopes: ["withViewAccess"])
}
