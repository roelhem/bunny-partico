type Group @node(resolver: "App\\Models\\Group@byIdWithAccess") {
    id: ID! @globalId
    name: String
    description: String
    remarks: String
    category: GroupCategory @belongsTo(relation: "category", scopes: ["withViewAccess"])
    contacts: [Contact!] @belongsToMany(relation: "contacts", type: "connection", scopes: ["withViewAccess"], edgeType: "GroupContactEdge")
    created_at: DateTime
    updated_at: DateTime
    created_by: User @belongsTo(relation: "creator")
    updated_by: User @belongsTo(relation: "editor")
    my_access_level: AccessLevel @method(name: "authAccessLevel")
    access_level(ability: String!): AccessLevel @method(name: "getAccessLevel", passOrdered: true)
    permission_flags: [PermissionFlag] @morphMany(relation: "permissionFlags")
}

type GroupCategory @node(resolver: "App\\Models\\GroupCategory@byIdWithAccess") {
    id: ID! @globalId
    name: String
    description: String
    remarks: String
    groups: Group @hasMany(relation: "groups", type: "connection",  scopes: ["withViewAccess"])
    created_at: DateTime
    updated_at: DateTime
    created_by: User @belongsTo(relation: "creator")
    updated_by: User @belongsTo(relation: "editor")
    my_access_level: AccessLevel @method(name: "authAccessLevel")
    access_level(ability: String!): AccessLevel @method(name: "getAccessLevel", passOrdered: true)
    permission_flags: [PermissionFlag] @morphMany(relation: "permissionFlags")
}

type GroupContactEdge {
    node: Contact
    cursor: String!
    created_at: DateTime
    updated_at: DateTime
}

type ContactGroupEdge {
    node: Group
    cursor: String!
    created_at: DateTime
    updated_at: DateTime
}

extend type Contact {
    groups: [Group] @belongsToMany(relation: "groups", type: "connection", scopes: ["withViewAccess"], edgeType: "ContactGroupEdge")
}

extend type Query {
    groups: [Group!] @paginate(type: "connection",  scopes: ["withViewAccess"])
    group_categories: [GroupCategory!] @paginate(type: "connection",  scopes: ["withViewAccess"])
}
