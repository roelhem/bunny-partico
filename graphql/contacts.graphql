type Contact implements AccessControlled @node(resolver: "App\\Models\\Contact@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    title: String
    name_parts: NameParts
    name: String @method(name:"name")
    nickname: String
    birth_date: Date
    """
    Returns the day when this person turns the given age.
    """
    birthday(
        """
        The age that you want to know.

        When this value is omitted, the next birthday of this person is returned.
        """
        age: Int = null
    ): Date @method(name: "resolveBirthDayField")
    """
    Returns the age of this person.
    """
    age(
        """
        The date at which you want to know the age of this person.

        When this value is ommitted, the current date will be used instead.
        """
        at: Date = null
    ): Int  @method(name: "resolveAgeField")
    remarks: String
    email_address: EmailAddress @hasOne(relation: "emailAddress", scopes: ["withViewAccess"])
    email_addresses: [EmailAddress] @hasMany(relation: "emailAddresses", scopes: ["withViewAccess"])
    postal_address: PostalAddress @hasOne(relation: "postalAddress", scopes: ["withViewAccess"])
    postal_addresses: [PostalAddress] @hasMany(relation: "postalAddresses", scopes: ["withViewAccess"])
    phone_number: PhoneNumber @hasOne(relation: "phoneNumber", scopes: ["withViewAccess"])
    phone_numbers: [PhoneNumber] @hasMany(relation: "phoneNumbers", scopes: ["withViewAccess"])
    language: ContactLanguage @hasOne(relation: "language", scopes: ["withViewAccess"])
    languages: [ContactLanguage] @hasMany(relation: "languages", scopes: ["withViewAccess"])
    relations: [ContactRelation] @hasMany(relation: "relations", scopes: ["withViewAccess"])
    related: [Contact] @belongsToMany(relation: "related", type: "connection", edgeType: "RelatedContactEdge")
    relatesTo: [Contact] @belongsToMany(relation: "relatesTo", type: "connection", edgeType: "RelatesToContactEdge")
}

type EmailAddress implements AccessControlled @node(resolver: "App\\Models\\EmailAddress@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    index: Int
    label: String
    remarks: String
    email_address: Email
    with_name: String
    link: URL
}

type PostalAddress implements AccessControlled @node(resolver: "App\\Models\\PostalAddress@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    index: Int
    label: String
    remarks: String
    country: Country
    administrative_area: String
    locality: String
    dependent_locality: String
    postal_code: String
    sorting_code: String
    address_line_1: String
    address_line_2: String
    organisation: String
    locale: Locale
    remarks: String
    """
    A string that displays the address according to the rules of the region of the address.
    """
    format(
        """
        Set this argument to `true` to return the formatted address with HTML-tags.
        """
        html: Boolean = false,
        """
        The locale in which the address should be formatted.
        """
        locale: Locale = "nl_NL"
    ): String @method(name: "resolveFormatField")
    """
    Returns a label that should be written on the envelope when you want to send something tho this address.
    """
    postal_label(
        """
        The country from which you send the letter.
        """
        origin_country: CountryCode = "NL"
    ): String @method(name: "resolvePostalLabelField")
}

"""
The type `PhoneNumber` represents a phone-number that can be represented in several
different formats. Furthermore, it is possible to retrieve some extra information about
the phone number based on patterns in the phone-number itself.
"""
type PhoneNumber implements AccessControlled @node(resolver: "App\\Models\\PhoneNumber@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    index: Int
    label: String
    remarks: String
    country: Country
    """
    The type of this `PhoneNumber`. This value is determined based on the patterns in the phone-number itself.
    """
    number_type: PhoneNumberType
    """
    'A `String`-representation of the `PhoneNumber` in this field.
    """
    number(
        """
        Optional argument that can be used to set the format in which you want to represent the `PhoneNumber`.
        """
        format: PhoneNumberFormat = FOR_MOBILE
        """
        The code of a region. The phone number will be formatted to enable calls from the specified region.
        """
        from: CountryCode = "NL"
    ): String @method(name: "resolveNumberAttribute")
    """
    Returns the extension of the number.
    """
    extension: String
    """
    Returns a string that can be used as a link on mobile phones. When clicked on this linked, the phone-number of
    the current object will be called by the user.
    """
    link: URL
    """
    An approximation for where the `PhoneNumber` is located. This value will be determined based on the patterns in
    the phone-number itself.
    """
    location(
        """
        The locale in which to display the location of this PhoneNumber
        """
        locale: Locale = null
    ): String @method(name: "resolveLocationAttribute")
}

type ContactLanguage implements AccessControlled @node(resolver: "App\\Models\\ContactLanguage@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    index: Int
    label: String
    remarks: String
    language: Language
}

type ContactRelation implements AccessControlled @node(resolver: "App\\Models\\ContactRelation@byIdWithAccess")
    @timestamps @userstamps @teamstamps @accessControl {
    id: ID! @globalId
    index: Int
    label: String
    remarks: String
    related: Contact @belongsTo(relation: "related")
}

type RelatedContactEdge @timestamps {
    node: Contact
    id: String @globalIdRef(type: "ContactRelation")
    cursor: String!
    label: String
}

type RelatesToContactEdge @timestamps {
    node: Contact
    id: String @globalIdRef(type: "ContactRelation")
    cursor: String!
    label: String
}

"""
Object representing the name of a person.
"""
type NameParts {
    """
    The full name when it differs from a standard format.
    """
    full: String
    """
    The initails of an individual.
    """
    initials: String
    """
    The prefix of a name.
    """
    prefix: String
    """
    The first name.
    """
    first: String
    """
    The middle name.
    """
    middle: String
    """
    The last name/family name.
    """
    last: String
    """
    The suffix of the name.
    """
    suffix: String
}

extend type Query {
    contacts: [Contact!] @paginate(type: "connection", scopes: ["withViewAccess"])
}

########################################################################################################################
#  MUTATIONS                                                                                                           #
########################################################################################################################

type Mutation {
    updateEmailAddress(input: UpdateEmailAddressInput! @spread): EmailAddress @update(globalId: true)
    updateContactLanguage(input: UpdateContactLanguageInput! @spread): ContactLanguage @update(globalId: true)
    updateContactRelation(input: UpdateContactRelationInput! @spread): ContactRelation @update(globalId: true)
    updatePostalAddress(input: UpdatePostalAddressInput! @spread): PostalAddress @update(globalId: true)
}

input CreateContactInput {
    title: String
    name: NameInput
    nickname: String
}

input NameInput {
    full: String
    initials: String
    prefix: String
    first: String
    middle: String
    last: String
    suffix: String
}

input UpdateEmailAddressInput {
    id: ID! @globalId(decode: "ID")
    label: String @trim @rules(apply:["max:63"])
    email_address: String @trim @rules(apply: ["email"])
    remarks: String
}

input UpdateContactLanguageInput {
    id: ID! @globalId(decode: "ID")
    label: String @trim @rules(apply: ["max:63"])
    language_code: Locale @trim @rules(apply: ["language_code"])
    remarks: String
}

input UpdatePostalAddressInput {
    id: ID! @globalId(decode: "ID")
    label: String @trim @rules(apply: ["max:63"])
    country_code: CountryCode
    administrative_area: String
    locality: String
    dependent_locality: String
    postal_code: String
    sorting_code: String
    address_line_1: String
    address_line_2: String
    organisation: String
    remarks: String
}

input UpdatePhoneNumberInput {
    id: ID! @globalId(decode: "ID")
    label: String @trim @rules(apply: ["max:63"])
    phone_number: String
    country_code: CountryCode
    remarks: String
}

input UpdateContactRelationInput {
    id: ID! @globalId(decode: "ID")
    label: String @trim @rules(apply: ["max:63"])
    related_contact_id: ID @globalId(decode: "ID")
    remarks: String
}
