<?php


namespace App\Providers;


use App\Services\OpenID\BearerTokenResponse;
use Illuminate\Contracts\Container\Container;
use Laravel\Passport\Bridge;
use Laravel\Passport\Passport;
use Lcobucci\JWT\Builder;
use Lcobucci\JWT\Configuration;
use Lcobucci\JWT\Signer;
use League\OAuth2\Server\AuthorizationServer;

class PassportServiceProvider extends \Laravel\Passport\PassportServiceProvider
{

    protected function registerJWTSigners() {
        // NONE SIGNER
        $this->app->singleton(Signer\None::class, function () {
            return new Signer\None();
        });

        // HMAC SIGNERS
        $this->app->singleton(Signer\Hmac\Sha256::class);
        $this->app->singleton(Signer\Hmac\Sha384::class);
        $this->app->singleton(Signer\Hmac\Sha512::class);
        $this->app->bind(Signer\Hmac::class, Signer\Hmac\Sha256::class);

        // OPEN SSL SIGNERS
        // Ecdsa Signers
        $this->app->singleton(Signer\Ecdsa\Sha256::class, function () {
            return Signer\Ecdsa\Sha256::create();
        });
        $this->app->singleton(Signer\Ecdsa\Sha384::class, function () {
            return Signer\Ecdsa\Sha384::create();
        });
        $this->app->singleton(Signer\Ecdsa\Sha512::class, function () {
            return Signer\Ecdsa\Sha256::create();
        });
        $this->app->bind(Signer\Ecdsa::class);

        // RSA Signer.
        $this->app->singleton(Signer\Rsa\Sha256::class);
        $this->app->singleton(Signer\Rsa\Sha384::class);
        $this->app->singleton(Signer\Rsa\Sha512::class);
        $this->app->bind(Signer\Rsa::class, Signer\Rsa\Sha256::class);

        // OpenSSL main signer.
        $this->app->bind(Signer\OpenSSL::class, Signer\Rsa::class);

        // DEFAULT SIGNER
        // Main signer
        $this->app->bind(Signer::class, Signer\OpenSSL::class);
    }

    protected function registerJWTConfiguration() {
        $this->app->singleton('jwt.configuration.insecure', function () {
            return Configuration::forUnsecuredSigner();
        });
        $this->app->bind(Configuration::class, 'jwt.configuration.insecure');
    }

    protected function registerJWTBuilder() {
        $this->app->bind(Builder::class, function (Container $app) {
            return $app->make(Configuration::class)
                ->builder()
                ->issuedBy(url()->current())
                ->issuedAt(new \DateTimeImmutable);
        });
    }

    public function boot()
    {
        parent::boot();

        Passport::tokensCan([
            'openid' => 'OpenID Connect',
            'email' => 'The e-mail address of your account.',
            'profile' => 'Your Profile Info',
            'address' => 'Your postal address',
            'phone' => 'Your phone number',
        ]);
    }

    public function register()
    {
        $this->app->bind(BearerTokenResponse::class);

        // JWT Signers
        $this->registerJWTSigners();
        $this->registerJWTConfiguration();
        $this->registerJWTBuilder();

        parent::register(); // TODO: Change the autogenerated stub
    }

    /**
     * @return AuthorizationServer
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function makeAuthorizationServer()
    {
        return new AuthorizationServer(
            $this->app->make(Bridge\ClientRepository::class),
            $this->app->make(Bridge\AccessTokenRepository::class),
            $this->app->make(Bridge\ScopeRepository::class),
            $this->makeCryptKey('private'),
            app('encrypter')->getKey(),
            $this->app->make(BearerTokenResponse::class),
        );
    }
}
